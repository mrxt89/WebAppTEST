```text
Prompt 1 – Step 1: Modifiche al Database
Sei un **DBA T‑SQL** esperto di architetture enterprise.  
Per il contesto dell’applicazione fai riferimento a Documentazione.md e README.md.  
Come indicato in WorkflowTicketSystem.md (Step 1: Modifiche Database)
- In directory `SQL/`, crea il file `create_ticket_tables.sql` definendo le tabelle:
  - AR_Ticket, AR_TicketPriority, AR_TicketStatus, AR_TicketCategory, AR_TicketResolution
  - AR_TechnicianTags, AR_TechnicianTagMapping, AR_TicketAssignment, AR_TicketStatusLog
  - Definisci colonne (con tipi, PK, FK), indici e vincoli di integrità.
  - Inserisci i dati iniziali per stati (Aperto, In lavorazione, Risolto, Chiuso) e priorità (Bassa, Media, Alta).
- In directory `SQL/`, modifica il file `alter_notification_tables.sql` aggiungendo:
  - Colonna `IsTicket` BIT a `AR_Notifications`
  - Colonne `IsResolution` BIT, `ResolutionId` FK, `IsTicketDescription` BIT, `IsSystemMessage` BIT in `AR_NotificationDetails`.
```

```text
Prompt 2 – Step 2: Modifiche Backend
Sei un **backend engineer Node.js/Express** specializzato in API REST scalabili.  
Per il contesto dell’applicazione fai riferimento a Documentazione.md e README.md.  
Come indicato in WorkflowTicketSystem.md (Step 2: Modifiche Backend)
- In `backend/routes/`, crea `ticketRoutes.js` definendo queste rotte REST:
  POST /tickets, GET /tickets, GET /tickets/:id, PATCH /tickets/:id/status, PATCH /tickets/:id/assign, GET /tickets/categories, GET /tickets/priorities, POST /tickets/:id/resolution, POST /tickets/:id/reopen  
  – Includi middleware di autenticazione, autorizzazione e gestione errori.
- In `backend/queries/`, crea `ticketQueries.js` con funzioni CRUD e filtri (workcenter, stato, priorità, categoria).
- In `backend/services/`, crea `ticketService.js` (logica di business, integrazione notifiche/allegati) e `aiTicketService.js` (classify, suggest-resolution, summarize via OpenAI/Claude).
- Modifica in `backend/routes/notificationsRoutes.js` e `backend/services/aiService.js` per supportare notifiche e prompt specifici per i ticket.
- Estendi `backend/services/fileService.js` per ottimizzare salvataggio e gestione degli allegati dei ticket.
```

```text
Prompt 3 – Step 3: Modifiche Frontend
Sei un **frontend engineer React/Vite con Redux** focalizzato su UX e performance.  
Per il contesto dell’applicazione fai riferimento a Documentazione.md e README.md.  
Come indicato in WorkflowTicketSystem.md (Step 3: Modifiche Frontend)
- In `src/redux/features/tickets/`, crea `ticketsSlice.js` (state, reducers, actions per fetch/list/create/assign/update-status) e `ticketsHooks.js` (hook `useTickets()` con thunk asincroni).
- In `src/services/tickets/`, crea `ticketService.js` con funzioni JS per chiamate HTTP, gestione errori e caching.
- In `src/components/ticket/`, crea:
  - `TicketForm.jsx` (form di creazione con validazione, upload allegati, integrazione suggerimenti IA)
  - `TicketList.jsx` (lista con filtri, paginazione)
  - `TicketDetails.jsx` (dettagli ticket, chat riusata da `ChatWindow`)
  - Badge e componenti ausiliari: `TicketStatusBadge.jsx`, `TicketResolutionForm.jsx`, `TicketMetadata.jsx`, `TechnicianTagSelector.jsx`, `AssigneeSelector.jsx`.
- Modifica `src/components/chat/ChatTopBar.jsx` e `ChatBottomBar.jsx` aggiungendo le UI per metadati ticket, selettore status, suggerimenti IA.
```

```text
Prompt 4 – Step 4: Sistema di Assegnazione con Tag
Sei un **full‑stack engineer Node.js/React** con esperienza in architetture modulari.  
Per il contesto dell’applicazione fai riferimento a Documentazione.md e README.md.  
Come indicato in WorkflowTicketSystem.md (Sistema di Assegnazione Ticket con Tag)
- In `SQL/`, assicurati che `AR_TechnicianTags`, `AR_TechnicianTagMapping`, `AR_TicketAssignment` esistano come specificato.
- In `backend/routes/`, crea rotte:  
  GET /technicians/tags, GET /technicians/by-tags?tagIds=[…], POST /technicians/tags.
- In `backend/services/ticketService.js`, implementa `assignTicketToTechnicians(ticketId, technicians, assignedBy)`.
- In `src/components/ticket/`, crea `TechnicianTagSelector.jsx` e `AssigneeSelector.jsx` per selezione tag e assegnazione multi‑tecnico (con designazione lead).
```

```text
Prompt 5 – Step 5: Stored Procedure
Sei un **DBA T‑SQL** specializzato in ottimizzazione e sicurezza.  
Per il contesto dell’applicazione fai riferimento a Documentazione.md e README.md.  
Come indicato in WorkflowTicketSystem.md (Step 5: Stored Procedure)
- In `SQL/StoredProcedures/`, crea `StoredProcedures.sql` contenente:
  1. `CreateTicket`: inserimento notifica, dettaglio, record in `AR_Ticket`.
  2. `UpdateTicketStatus`: update stato con logging in `AR_TicketStatusLog` e messaggio sistema in `AR_TicketChat`.
  3. `CreateTicketResolution`: inserimento risoluzione e aggiornamento stato.
  4. `GetTicketsByTechnicianTags`: filtri tag, stato, priorità, paginazione, output JSON.
```

```text
Prompt 6 – Step 6: Integrazione AI
Sei un **AI engineer** con esperienza su OpenAI e Claude.  
Per il contesto dell’applicazione fai riferimento a Documentazione.md e README.md.  
Come indicato in WorkflowTicketSystem.md (Step 10: Integrazione AI)
- In `backend/services/aiTicketService.js`, implementa le funzioni:
  - `classifyTicket(description, categoryId, priorityId)` → { suggestedCategory, suggestedPriority, suggestedTechnician, confidence }
  - `suggestResolution(conversationText)` → array di possibili soluzioni
  - `summarizeResolution(conversationText)` → { summary, keyPoints, tags }
- Includi esempi di prompt e parsing delle risposte dal modello.
```

```text
Prompt 7 – Step 7: Testing
Sei un **QA engineer** esperto in automazione e test coverage.  
Per il contesto dell’applicazione fai riferimento a Documentazione.md e README.md.  
Come indicato in WorkflowTicketSystem.md (Step 11: Testing)
- In `tests/unit/`, crea esempi Jest per:
  - componenti React (`TicketForm`, `TicketList`)
  - funzioni di service (`ticketService`, `aiTicketService`).
- In `tests/integration/`, usa Supertest per le API Express `/tickets`, `/tickets/:id/status`, `/tickets/classify`, ecc.
- In `tests/e2e/`, scrivi uno spec Cypress (`ticket_flow.spec.js`) che copra creazione → assegnazione → risoluzione → chiusura.
- Aggiungi un file `TEST_PLAN.md` in `docs/` con la strategia e i criteri di accettazione.
```

```text
Prompt 8 – Step 8: Documentazione Finale
Sei un **technical writer** specializzato in documentazione tecnica.  
Per il contesto dell’applicazione fai riferimento a Documentazione.md e README.md.  
Come indicato in WorkflowTicketSystem.md (Panoramica & Approccio)
- In `docs/`, crea `overview.md` con:
  - Panoramica del progetto (obiettivi, vantaggi del riuso chat)
  - Approccio di integrazione (riutilizzi, estensioni, rollout)
- Formatta in Markdown italiano, 250–300 parole per la panoramica e tre sezioni per l’approccio.
```