// src/redux/features/notifications/highlightsSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';
import { config } from '../../../config';

// Async thunk for fetching highlights for a notification
export const fetchHighlights = createAsyncThunk(
  'highlights/fetchHighlights',
  async (notificationId, { rejectWithValue }) => {
    try {
      if (!notificationId) {
        return rejectWithValue('Invalid notification ID');
      }
      
      const token = localStorage.getItem('token');
      if (!token) {
        return rejectWithValue('No authentication token available');
      }
      
      const response = await axios.get(
        `${config.API_BASE_URL}/highlights/${notificationId}`,
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      
      if (response.data) {
        return {
          notificationId,
          highlights: response.data
        };
      } else {
        return rejectWithValue('Failed to fetch highlights');
      }
    } catch (error) {
      console.error('Error fetching highlights:', error);
      return rejectWithValue(error.message || 'Failed to fetch highlights');
    }
  }
);

// Async thunk for adding a highlight
export const addHighlight = createAsyncThunk(
  'highlights/addHighlight',
  async ({ notificationId, highlightText, isAutoGenerated = false }, { rejectWithValue, dispatch }) => {
    try {
      if (!notificationId || !highlightText) {
        return rejectWithValue('Missing required parameters');
      }
      
      const token = localStorage.getItem('token');
      if (!token) {
        return rejectWithValue('No authentication token available');
      }
      
      const response = await axios.post(
        `${config.API_BASE_URL}/highlights`,
        {
          notificationId,
          highlightText,
          isAutoGenerated
        },
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      
      if (response.data && response.data.Success) {
        // Update the highlights list
        dispatch(fetchHighlights(notificationId));
        
        // Emit an event for other components
        const event = new CustomEvent('highlight-added', {
          detail: {
            notificationId,
            highlightId: response.data.HighlightId,
            text: highlightText
          }
        });
        document.dispatchEvent(event);
        
        return {
          success: true,
          notificationId,
          highlightId: response.data.HighlightId,
          text: highlightText
        };
      } else {
        return rejectWithValue(response.data?.Message || 'Failed to add highlight');
      }
    } catch (error) {
      console.error('Error adding highlight:', error);
      return rejectWithValue(error.message || 'Failed to add highlight');
    }
  }
);

// Async thunk for removing a highlight
export const removeHighlight = createAsyncThunk(
  'highlights/removeHighlight',
  async ({ highlightId, notificationId }, { rejectWithValue, dispatch }) => {
    try {
      if (!highlightId) {
        return rejectWithValue('Invalid highlight ID');
      }
      
      const token = localStorage.getItem('token');
      if (!token) {
        return rejectWithValue('No authentication token available');
      }
      
      const response = await axios.delete(
        `${config.API_BASE_URL}/highlights/${highlightId}`,
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      
      if (response.data && response.data.Success) {
        // Update the highlights list if notificationId is provided
        if (notificationId) {
          dispatch(fetchHighlights(notificationId));
        }
        
        // Emit an event for other components
        const event = new CustomEvent('highlight-removed', {
          detail: {
            notificationId,
            highlightId
          }
        });
        document.dispatchEvent(event);
        
        return {
          success: true,
          notificationId,
          highlightId
        };
      } else {
        return rejectWithValue(response.data?.Message || 'Failed to remove highlight');
      }
    } catch (error) {
      console.error('Error removing highlight:', error);
      return rejectWithValue(error.message || 'Failed to remove highlight');
    }
  }
);

// Async thunk for generating highlights automatically
export const generateHighlights = createAsyncThunk(
  'highlights/generateHighlights',
  async (notificationId, { rejectWithValue }) => {
    try {
      if (!notificationId) {
        return rejectWithValue('Invalid notification ID');
      }
      
      const token = localStorage.getItem('token');
      if (!token) {
        return rejectWithValue('No authentication token available');
      }
      
      const response = await axios.post(
        `${config.API_BASE_URL}/highlights/generate/${notificationId}`,
        {},
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      
      if (response.data) {
        // Emit an event for other components
        const event = new CustomEvent('highlights-generated', {
          detail: {
            notificationId,
            highlights: response.data
          }
        });
        document.dispatchEvent(event);
        
        return {
          notificationId,
          highlights: response.data
        };
      } else {
        return rejectWithValue('Failed to generate highlights');
      }
    } catch (error) {
      console.error('Error generating highlights:', error);
      return rejectWithValue(error.message || 'Failed to generate highlights');
    }
  }
);

// Highlights slice
const highlightsSlice = createSlice({
  name: 'highlights',
  initialState: {
    highlights: {}, // Organized by notificationId
    loading: false,
    error: null
  },
  reducers: {
    clearHighlights: (state, action) => {
      if (action.payload) {
        // Clear highlights for a specific notification
        const notificationId = action.payload;
        delete state.highlights[notificationId];
      } else {
        // Clear all highlights
        state.highlights = {};
      }
    }
  },
  extraReducers: (builder) => {
    builder
      // Fetch highlights
      .addCase(fetchHighlights.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchHighlights.fulfilled, (state, action) => {
        state.loading = false;
        const { notificationId, highlights } = action.payload;
        state.highlights[notificationId] = highlights;
      })
      .addCase(fetchHighlights.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })
      
      // Add highlight
      .addCase(addHighlight.pending, (state) => {
        state.loading = true;
      })
      .addCase(addHighlight.fulfilled, (state, action) => {
        state.loading = false;
        // No state update needed here, as we call fetchHighlights
      })
      .addCase(addHighlight.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })
      
      // Remove highlight
      .addCase(removeHighlight.pending, (state) => {
        state.loading = true;
      })
      .addCase(removeHighlight.fulfilled, (state, action) => {
        state.loading = false;
        // No state update needed here, as we call fetchHighlights
      })
      .addCase(removeHighlight.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })
      
      // Generate highlights
      .addCase(generateHighlights.pending, (state) => {
        state.loading = true;
      })
      .addCase(generateHighlights.fulfilled, (state, action) => {
        state.loading = false;
        const { notificationId, highlights } = action.payload;
        state.highlights[notificationId] = highlights;
      })
      .addCase(generateHighlights.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      });
  }
});

// Export actions
export const { clearHighlights } = highlightsSlice.actions;

// Export selectors
export const selectHighlights = (state, notificationId) => 
  state.highlights.highlights[notificationId] || [];
export const selectHighlightsLoading = (state) => 
  state.highlights.loading;
export const selectHighlightsError = (state) => 
  state.highlights.error;

export default highlightsSlice.reducer;